.. _elementsOfProgramming:

=====================
Елементи програмирања
=====================

Програмски језик је више од пуког средства за наређивање рачунару да изврши задатке. Језик такође служи и као окосница у којој програмери организују своје идеје о рачунским поступцима. Програми служе да пренесу те идеје међу члановима програмерске заједнице. Према томе, програми морају првенствено бити написани на начин да буду читљиви другим људима, а само успутно буду и извршавани на уређајима.

Приликом описа језика, потребно је посебно обратити пажњу на начине, то јест средства које језик пружа за комбиновање и спајање једноставних идеја да би се изградиле, односно образовале сложеније идеје. Сваки моћан програмски језик поседује три таква механизма:

* **примитивне изразе и наредбе** који представљају најједноставније структурне елементе које језик обезбеђује,
* **средства комбиновања** помоћу којих се сложени елементи граде из простијих, и
* **начине апстракције** којим се сложени елементи могу именовати и користити као јединични.

У програмирању постоје две врсте елемената: функције и подаци (иако ће ускоро бити разоткривено да и нису заиста толико различити). Неформално говорећи, подаци су ствари којима се жели манипулисати, а функције описују правила манипулисања подацима. Тако сваки моћан програмски језик треба да има могућност описа примитивних података и примитивних функција, као и да поседује неке методе комбиновања и апстраковања и једних и других, односно и функција и података.

.. _expressions:

Изрази
------

Након експериментисања с Пајтоновим интерпретатором у претходном одељку, сада ће изнова бити започет методички развој програмског језика Пајтон елемент по елемент. Треба бити стрпљив ако примери изгледају поједностављено јер узбудљивији материјал ускоро долази.

Отпочећемо примитивним изразима. Једна врста примитивног израза је број. Тачније, израз који је записан састоји се из цифара које представљају број у декадном систему.

    >>> 42
    42

Изрази који представљају бројеве могу се комбиновати и спајати с математичким операторима како би се образовали сложени изрази које ће интерпретатор вредновати:

    >>> -1 - -1
    0
    >>> 1/2 + 1/4 + 1/8 + 1/16 + 1/32 + 1/64 + 1/128
    0.9921875

Ови математички изрази користе такозвани *инфиксни* запис у коме се *оператор* (на пример, ``+``, ``-``, ``*`` или ``/``) појављује између *операнада* (бројева). Пајтон нуди много начина да се образују сложени изрази. Уместо пуког набрајања свих начина, биће постепено увођени нови облици израза заједно са језичким својствима које подржавају.

.. _callExpressions:

Позивни изрази
--------------

Најважнија врста сложених израза јесте израз позива или такозвани *позивни израз* који примењује функцију над неким аргументима. Присећајући се математичког појма функције из алгебре знамо да је то пресликавање неког улазног аргумента у излазну вредност. На пример, функција ``max`` пресликава своје улазе на један излаз који представља највећу вредност међу улазима. Начин на који Пајтон изражава примену функције исти је као и у математици.

    >>> max(7.5, 9.5)
    9.5

Овај позивни израз има и своје подизразе: *оператор* је израз који претходи заградама између којих се налази низ зарезом раздвојених израза који представљају *операнде*.

.. math:: \underbrace{\quad\quad\quad\mathtt{max}\quad\quad\quad}_{\text{оператор}}(\underbrace{\quad\quad\quad\mathtt{7.5}\quad\quad\quad}_{\text{операнд}},\underbrace{\quad\quad\quad\mathtt{9.5}\quad\quad\quad}_{\text{операнд}})

Оператор специфицира *функцију*. Када се овај позивни израз вреднује каже се да је функција ``max`` *позвана* са или над *аргументима* 7.5 и 9.5, и *враћа* *вредност* 9.5.

Редослед аргумената у позивном изразу је од значаја. На пример, функција ``pow`` подиже свој први аргумент на степен представљен другим аргументом.

    >>> pow(100, 2)
    10000
    >>> pow(2, 100)
    1267650600228229401496703205376

Функционални запис има три главне предности у односу на математички конвенционалну инфиксну нотацију. Прво, функције могу примати произвољан број аргумената:

    >>> max(1, -2, 3, -4)
    3

Нема двосмислености пошто име функције увек претходи њеним аргументима.

Друго, функционална нотација се праволинијски може проширити на угнежђене изразе код којих су сами елементи сложени изрази. У угнежђеним позивним изразима, насупрот сложеним инфиксним изразима, структура угнежђивања је у потпуности одређена унутар заграда.

    >>> max(min(1, -2), min(pow(3, 5), -4))
    -2

Не постоји (принципијелно) ограничење дубине таквог угнежђивања ни свеукупне сложености израза коју Пајтонов интерпретатор може вредновати. Међутим, људи брзо постају збуњени вишеструким угнежђивањем. Важна улога програмера јесте да структуира изразе на такав начин да остану разумљиви како њему, тако и другим људима који ће можда читати његове изразе у будућности.

Треће, математички записи су врло разноврсни: множење се појављује између чиниоца, степеновање као експонент, дељење као разломачка црта, а квадратни корен као потпуно засебан симбол. Неке од ових записа није једноставно искуцати! Па ипак, сва ова сложеност се може ујединити кроз нотацију позивних израза. Иако Пајтон подржава уобичајене математичке операторе у инфиксној нотацији (као што су ``+`` и ``-``), сваки оператор може бити изражен као именована функција.

